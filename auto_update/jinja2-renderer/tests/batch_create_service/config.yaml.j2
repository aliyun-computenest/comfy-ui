{%- set ArtifactDisplayName = ModelNameSuffix.replace('.', '_') -%}

Service:
  DeployType: ros
  DeployMetadata:
    SupplierDeployMetadata:
      DeployTimeout: 7200
      ArtifactRelation:
        {{ EcsImageName }}:
          ArtifactId: ${Artifact.Artifact_1.ArtifactId}
          ArtifactVersion: 'draft'
      FileArtifactRelation:
        {% raw %}'{{ computenest::file::kubectl }}'{% endraw %}:
          ArtifactId: artifact-2cd0e35a3a3d45a78938
          ArtifactVersion: '1'
        {% raw %}'{{ computenest::file::template-j2 }}'{% endraw %}:
          ArtifactId: ${Artifact.Artifact_2.ArtifactId}
          ArtifactVersion: 'draft'
        {% raw %}'{{ computenest::file::ossutil }}'{% endraw %}:
          ArtifactId: artifact-02f42b30ffd44e1fa20e
          ArtifactVersion: '1'
        {% raw %}'{{ computenest::file::jinja2 }}'{% endraw %}:
          ArtifactId: artifact-d2cefb483e2749ed8641
          ArtifactVersion: '2'
    TemplateConfigs:
      - Name: {{ ArtifactDisplayName }}_模板
        Url: ros_templates/template.yaml
        AllowedRegions:
          - cn-hangzhou
          - cn-beijing
          - cn-shanghai
          - cn-hongkong
          - ap-southeast-1
          - cn-wulanchabu
        PredefinedParameters: []
        DeployScene: ACK_EXIST
        OutputConfigs:
          - OutputKey: __biubiu__
            EnableWebProxy: false
    NetworkMetadata:
      EnablePrivateVpcConnection: false
      EnableReversePrivateVpcConnection: false
    ServiceInstanceNameRule:
      UseDefaultValue: false
  ServiceType: private
  ShareType: Public
  ApprovalType: Manual
  ServiceInfo:
    - Agreements: [ ]
      Image: resources/service_logo.png
      Locale: zh-CN
      Softwares: [ ]
Artifact:
  Artifact_1:
    ArtifactType: EcsImage
    ArtifactName: {{ ArtifactDisplayName }}
    Description: {{ ArtifactDisplayName }}模型镜像，支持多地域
    ArtifactProperty:
      RegionId: ${ImageBuilder.EcsImage.RegionId}
      ImageId: ${ImageBuilder.EcsImage.SourceImageId}
    SupportRegionIds:
      - cn-beijing
      - cn-hangzhou
      - ap-southeast-1
      - cn-hongkong
      - cn-shanghai
      - cn-wulanchabu
  Artifact_2:
    ArtifactType: File
    ArtifactName: {{ ArtifactDisplayName }}_k8s_resource
    Description: {{ ArtifactDisplayName }}_模型K8s资源文件
    ArtifactProperty:
      RegionId: cn-hangzhou
      Url: resources/file/k8s-resource.yaml
    SupportRegionIds:
      - cn-beijing
      - cn-hangzhou
      - ap-southeast-1
      - cn-hongkong
      - cn-shanghai
      - cn-wulanchabu
ImageBuilder:
  EcsImage:
    RegionId: cn-hangzhou
    SourceImageId: m-bp1huipf6yv8qviaxjk6
    TargetImageName: {{ ArtifactDisplayName }}
    SystemDiskSize: {{ SystemDiskSize }}
    InstanceType: ecs.c7.large
    CommandType: RunShellScript
    ZoneId: cn-hangzhou-k
    SecurityGroupId: sg-bp141arf6chgiy94wxfz
    VSwitchId: vsw-bp1ldot9fiz8sj26jekwi
    InternetMaxBandwidthOut: 100
    Timeout: 10800
    Tags: []
    CommandContent: |-
      #!/bin/bash

      set -e  # 遇到错误立即退出
      yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
        yum makecache
        yum install -y wget curl unzip git jq
        yum install -y docker-ce
        systemctl start docker || error "启动 Docker 服务失败"
        systemctl enable docker || warn "设置 Docker 开机自启动失败"
        sleep 20

      MODEL_PATH="/root/llm-model/{{ ModelName }}"

      # 检查工具
      command -v git >/dev/null || { echo "请安装 git"; exit 1; }
      command -v git-lfs >/dev/null || { echo "请安装 git-lfs"; exit 1; }
      command -v docker >/dev/null || { echo "请安装 docker"; exit 1; }
      command -v docker compose >/dev/null || { echo "请安装 docker-compose"; exit 1; }

      # 配置hosts
      echo "配置hosts..."
      grep -q "10.0.6.32 www.modelscope.cn" /etc/hosts || echo '10.0.6.32 www.modelscope.cn' >> /etc/hosts

      # 清理现有文件
      if [ -d "/root/llm-model" ]; then
          echo "删除现有文件..."
          rm -rf /root/llm-model
      fi

      # 动态检查磁盘空间（先克隆再检查LFS大小）
      echo "创建目录..."
      mkdir -p "$(dirname "$MODEL_PATH")"

      echo "克隆仓库（不下载LFS文件）..."
      REPO_URL="https://www.modelscope.cn/{{ ModelName }}.git"
      if ! GIT_LFS_SKIP_SMUDGE=1 git clone --progress "$REPO_URL" "$MODEL_PATH"; then
          echo "错误: 仓库克隆失败"
          exit 1
      fi
      cd "$MODEL_PATH"
      echo "检查LFS文件大小..."
      if git lfs ls-files --size 2>/dev/null | grep -v "^$"; then
          # 简单计算：提取所有GB数字并相加
          TOTAL_GB=$(git lfs ls-files --size | grep -o '([0-9.]*[[:space:]]*GB)' | grep -o '[0-9.]*' | awk '{sum += $1} END {print int(sum+0.5)}')
          if [ -z "$TOTAL_GB" ] || [ "$TOTAL_GB" -eq 0 ]; then
              TOTAL_GB=20  # 默认20GB
          fi
          REQUIRED_GB=$((TOTAL_GB + 5))  # 加5GB缓冲
          echo "LFS文件总大小约: ${TOTAL_GB}GB，需要空间: ${REQUIRED_GB}GB"
          AVAILABLE_GB=$(df /root | tail -1 | awk '{print int($4/1024/1024)}')
          if [ "$AVAILABLE_GB" -lt "$REQUIRED_GB" ]; then
              echo "错误: 磁盘空间不足! 可用: ${AVAILABLE_GB}GB, 需要: ${REQUIRED_GB}GB"
              exit 1
          fi
          echo "磁盘空间检查通过: ${AVAILABLE_GB}GB 可用"
      else
          echo "未检测到LFS文件"
      fi

      # 下载LFS文件
      echo "下载LFS文件..."
      git config lfs.progress true

      if ! git lfs pull; then
          echo "错误: LFS文件下载失败"
          exit 1
      fi

      echo "下载完成! 模型路径: $MODEL_PATH"

      # ==================== 处理模型文件移动 ====================

      echo "开始处理模型文件移动..."

      # 创建存储目录（提前创建，确保后续移动操作成功）
      echo "创建存储目录..."
      mkdir -p /root/storage/{models,output,user_scripts,user,input}

      # 检查并移动 split_files 目录下的文件夹
      SPLIT_FILES_PATH="$MODEL_PATH/split_files"
      if [ -d "$SPLIT_FILES_PATH" ]; then
          echo "发现 split_files 目录，开始移动模型文件..."

          # 遍历 split_files 目录下的所有子目录
          for dir in "$SPLIT_FILES_PATH"/*; do
              if [ -d "$dir" ]; then
                  dir_name=$(basename "$dir")
                  target_path="/root/storage/models/$dir_name"

                  echo "移动 $dir_name 到 $target_path"

                  # 如果目标目录已存在，先删除
                  if [ -d "$target_path" ]; then
                      echo "目标目录已存在，删除旧版本: $target_path"
                      rm -rf "$target_path"
                  fi

                  # 移动目录
                  if mv "$dir" "$target_path"; then
                      echo "✅ 成功移动: $dir_name"
                  else
                      echo "❌ 移动失败: $dir_name"
                      exit 1
                  fi
              fi
          done

          echo "✅ 模型文件移动完成!"
          echo "📁 模型文件位置: /root/storage/models/"

          # 显示移动后的目录结构
          echo "📋 移动后的模型目录结构:"
          ls -la /root/storage/models/

      else
          echo "⚠️  未发现 split_files 目录，跳过模型文件移动"
          echo "📁 当前模型目录内容:"
          ls -la "$MODEL_PATH"
      fi

      # ==================== ComfyUI 部署部分 ====================

      echo "开始部署 ComfyUI..."

      # 创建 ComfyUI 工作目录
      COMFYUI_DIR="/root/application/comfy/"
      mkdir -p "$COMFYUI_DIR"
      cd "$COMFYUI_DIR"

      # 生成 docker-compose.yml
      echo "生成 docker-compose.yml..."
      cat > docker-compose.yml << 'EOF'
      version: '3.8'

      services:
        comfyui:
          container_name: comfy-ui
          build:
            context: .
            dockerfile: Dockerfile
          restart: unless-stopped
          ports:
            - "8188:8188"
          volumes:
            - /root/storage/models:/root/ComfyUI/models
            - /root/storage/output:/root/ComfyUI/output
            - /root/storage/user_scripts:/root/ComfyUI/user_scripts
            - /root/storage/user:/root/ComfyUI/user
            - /root/storage/input:/root/ComfyUI/input
          deploy:
            resources:
              reservations:
                devices:
                  - driver: nvidia
                    count: all
                    capabilities: [ gpu ]
      EOF

      # 生成 Dockerfile
      echo "生成 Dockerfile..."
      cat > Dockerfile << 'EOF'
      # 使用阿里云预装CUDA 12.4和PyTorch的基础镜像
      FROM mirrors-ssl.aliyuncs.com/egs-registry.cn-hangzhou.cr.aliyuncs.com/egs/vllm:0.7.2-pytorch2.5.1-cuda12.4-ubuntu22.04

      LABEL maintainer="renyun"

      # 设置APT镜像源（阿里云源）
      RUN sed -i 's/archive.ubuntu.com/mirrors.aliyun.com/g' /etc/apt/sources.list && \
          sed -i 's/security.ubuntu.com/mirrors.aliyun.com/g' /etc/apt/sources.list

      # 安装系统依赖（基于Ubuntu 22.04）
      RUN apt-get update && \
          DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
          ffmpeg libsm6 libxext6 libgl1 libglib2.0-0 \
          git ninja-build aria2 wget

      # 安装Python依赖（复用基础镜像已安装的torch/vllm）
      RUN pip install --no-cache-dir \
          opencv-python-headless \
          scikit-learn \
          matplotlib \
          pandas \
          numba \
          xformers \
          "numpy<1.25" \
          SageAttention \
          Cython \
          py-build-cmake \
          aiohttp \
          ffmpeg-python \
          GitPython \
          joblib \
          lark \
          matplotlib \
          mpmath \
          onnx \
          pandas \
          qrcode \
          rich \
          scipy svglib \
          gradio>=5.0.0

      # 创建工作目录并克隆仓库
      WORKDIR /root
      COPY download_custom_nodes_script.sh download_custom_nodes_script.sh
      RUN date > /tmp/build_time
      RUN chmod +x download_custom_nodes_script.sh && ./download_custom_nodes_script.sh

      # 优化容器配置
      EXPOSE 8188
      WORKDIR /root/ComfyUI

      # 启动命令
      CMD ["python3", "main.py", "--listen", "--port", "8188", "--fast"]
      EOF

      cat > download_custom_nodes_script.sh << 'EOF'
      #!/bin/bash
      set -euo pipefail
      function clone_and_install () {
          local original_dir=$(pwd)
          local url="$1"
          local repo_name=$(basename "$url" .git)

          # 克隆阶段
          echo "🔻 开始克隆: $repo_name"
          if ! git clone --depth=1 --no-tags --recurse-submodules --shallow-submodules "$url"; then
              echo "❌ 克隆失败: $url" >&2
              return 1
          fi
          # 安装依赖阶段
          echo "📂 进入目录: $repo_name"
          cd "$repo_name" || return 2
          if [[ -f requirements.txt ]]; then
              echo "🔧 安装依赖: $repo_name"
              pip install -r requirements.txt > /dev/null
          else
              echo "ⓘ 未找到 requirements.txt"
          fi

          # 返回原目录
          echo "↩️ 返回上级目录"
          cd "$original_dir"

          # 返回完整路径
          echo "$(pwd)/$repo_name"
          echo "✅ 完成处理: $repo_name"
          echo "----------------------------------"
      }

      function clone () {
            set +e ;
            git clone --depth=1 --no-tags --recurse-submodules --shallow-submodules "$1";
            set -e ;
      }

      cd /root
      clone https://github.com/comfyanonymous/ComfyUI.git
      cd /root/ComfyUI
      pip install -r requirements.txt
      cd /root/ComfyUI/custom_nodes
      clone_and_install https://github.com/ltdrdata/ComfyUI-Manager.git
      clone_and_install https://github.com/kijai/ComfyUI-WanVideoWrapper.git
      clone_and_install https://github.com/crystian/ComfyUI-Crystools.git
      clone_and_install https://github.com/crystian/ComfyUI-Crystools-save.git
      clone_and_install https://github.com/Wan-Video/Wan2.1.git
      clone_and_install https://github.com/Suzie1/ComfyUI_Comfyroll_CustomNodes.git
      clone_and_install https://github.com/ltdrdata/ComfyUI-Impact-Pack.git
      clone_and_install https://github.com/welltop-cn/ComfyUI-TeaCache.git
      clone_and_install https://github.com/sh570655308/ComfyUI-TopazVideoAI.git
      # General
      clone_and_install https://github.com/cubiq/ComfyUI_InstantID.git
      clone_and_install https://github.com/pythongosssss/ComfyUI-Custom-Scripts.git
      clone_and_install https://github.com/bash-j/mikey_nodes.git
      clone_and_install https://github.com/kijai/ComfyUI-GIMM-VFI.git
      clone_and_install https://github.com/liusida/ComfyUI-Login.git
      clone_and_install https://github.com/city96/ComfyUI-GGUF.git
      rm -rf /root/ComfyUI/custom_nodes/login

      clone https://github.com/chrisgoringe/cg-use-everywhere.git
      clone https://github.com/cubiq/ComfyUI_essentials.git
      clone https://github.com/jags111/efficiency-nodes-comfyui.git
      clone https://github.com/kijai/ComfyUI-KJNodes.git
      clone https://github.com/rgthree/rgthree-comfy.git
      clone https://github.com/shiimizu/ComfyUI_smZNodes.git
      clone https://github.com/WASasquatch/was-node-suite-comfyui.git

      clone https://github.com/cubiq/PuLID_ComfyUI.git
      clone https://github.com/Fannovel16/comfyui_controlnet_aux.git
      clone https://github.com/florestefano1975/comfyui-portrait-master.git
      clone https://github.com/Gourieff/ComfyUI-ReActor.git
      clone https://github.com/huchenlei/ComfyUI-layerdiffuse.git
      clone https://github.com/Kosinkadink/ComfyUI-Advanced-ControlNet.git
      clone https://github.com/ltdrdata/ComfyUI-Inspire-Pack.git
      clone https://github.com/mcmonkeyprojects/sd-dynamic-thresholding.git
      clone https://github.com/twri/sdxl_prompt_styler.git
      EOF
      # 设置脚本执行权限
      chmod +x download_custom_nodes_script.sh
      # 构建并启动 ComfyUI
      echo "构建并启动 ComfyUI 容器..."
      docker-compose up -d --build
      echo "等待容器启动..."
      sleep 10
      # 检查容器状态
      if docker ps | grep -q "comfy-ui"; then
          echo "📋 最终模型目录结构:"
          if [ -d "/root/storage/models" ] && [ "$(ls -A /root/storage/models)" ]; then
              ls -la /root/storage/models/
          else
              echo "模型目录为空"
          fi
      else
          echo "❌ ComfyUI 部署失败，请检查日志:"
          docker-compose logs
          exit 1
      fi
